"use client"
import { Banner } from "@/components/Banner";
import LegendCard from "@/components/LegendCard";
import bgImage from "../assets/img/lol-bg.png";
import Link from "next/link"
import { useEffect, useRef, useState } from 'react';
import { useForm } from "@/hooks/useForm";

interface Props {
  championsData: Champion;
}

// Generated by https://quicktype.io

export interface Champion {
  type:    Type;
  format:  string;
  version: Version;
  data:    { [key: string]: Data };
}

export interface Data {
  version: Version;
  id:      string;
  key:     string;
  name:    string;
  title:   string;
  blurb:   string;
  info:    Info;
  image:   Image;
  tags:    Tag[];
  partype: string;
  stats:   { [key: string]: number };
}

export interface Image {
  full:   string;
  sprite: Sprite;
  group:  Type;
  x:      number;
  y:      number;
  w:      number;
  h:      number;
}

export enum Type {
  Champion = "champion",
}

export enum Sprite {
  Champion0PNG = "champion0.png",
  Champion1PNG = "champion1.png",
  Champion2PNG = "champion2.png",
  Champion3PNG = "champion3.png",
  Champion4PNG = "champion4.png",
  Champion5PNG = "champion5.png",
}

export interface Info {
  attack:     number;
  defense:    number;
  magic:      number;
  difficulty: number;
}

export enum Tag {
  Assassin = "Assassin",
  Fighter = "Fighter",
  Mage = "Mage",
  Marksman = "Marksman",
  Support = "Support",
  Tank = "Tank",
}

export enum Version {
  The13121 = "13.12.1",
}


export default function Champions({ championsData }: Props) {

  const [currentChampions, setCurrentChampions] = useState<Data[]>([]);
  
  const filteredChampions = useRef<Data[]>([]);

  const [values, handleInputChange, reset] = useForm({
    tag: '',
    searchText: ''
  });

  const { tag, searchText } = values;

  let champions = championsData.data;

  let arrayChampions:any = []; 

  for (let clave in champions){
    arrayChampions.push(champions[clave]);
  }

  useEffect(() => {
    setCurrentChampions(arrayChampions);
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []) 
  
  
  useEffect(() => {
    
    if (tag !== '') {
      filteredChampions.current = currentChampions.filter((c) => c.tags.find(e => e === tag));
      setCurrentChampions(currentChampions.filter((c) => c.tags.find(e => e === tag)));
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [tag])


  const options = [
    { value: 'Fighter', label: 'Fighter' },
    { value: 'Assassin', label: 'Assassin' },
    { value: 'Mage', label: 'Mage' },
    { value: 'Marksman', label: 'Marksman' },
    { value: 'Support', label: 'Support' },
    { value: 'Tank', label: 'Tank' }
  ];


  const handleSelectChange= (event: React.ChangeEvent<HTMLInputElement> ) => {
    setCurrentChampions(arrayChampions);
    handleInputChange(event);
  };

  const searchChange = (event: React.ChangeEvent<HTMLInputElement> ) => {
    setCurrentChampions(arrayChampions);
    handleInputChange(event);
  };

  console.log(currentChampions);

  // console.log(values);
  

  return (
    <>
    <Banner backgroundImage={`${bgImage.src}`} height="300px" overlay={true} overwriteByColor bannerText="Legends Never Die" />
    <div className="container mx-auto px-4 py-14">
      <div className="flex mb-8">
        <div className="searchBox me-4">
          <input className="searchInput" type="text" onChange={handleInputChange} name="searchText" value={searchText} placeholder="Search" />
          <button className="searchButton">
              <i className="material-icons">
                  search
              </i>
          </button>
        </div>
        {/* <input type="search" onChange={handleInputChange} name="searchText" value={searchText}/> */}
        <select name="tag" value={tag} onChange={ (e: any) => handleSelectChange(e) } className="selectTag">
          <option value="">Select Tag</option>
          {options.map(option => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
      </div>
      <div className="grid xl:grid-cols-4 md:grid-cols-2 xs:grid-cols-1 gap-4">
        { searchText === ''
          ?
        currentChampions.map((currentChampions: Data) => (
          <LegendCard 
            key={`${currentChampions.id}`} 
            id={`${currentChampions.id}`} 
            name={`${currentChampions.id}`} 
            title={`${currentChampions.title}`}
            champType={`${currentChampions.tags}`}
          />
        ))
        : currentChampions.filter((s: Data) => s.name.toLowerCase().includes(  searchText ? searchText.toLowerCase() : '')).map((currentChampions: Data) => (
          <LegendCard 
            key={`${currentChampions.id}`} 
            id={`${currentChampions.id}`} 
            name={`${currentChampions.id}`} 
            title={`${currentChampions.title}`}
            champType={`${currentChampions.tags}`}
          />
        ))}
      </div>
    </div>
    </>
  )
}
 
// This function gets called at build time on server-side.
// It won't be called on client-side, so you can even do
// direct database queries.
export async function getStaticProps() {
  // Call an external API endpoint to get posts.
  // You can use any data fetching library
  const res = await fetch('http://ddragon.leagueoflegends.com/cdn/13.12.1/data/en_US/champion.json');
  
  const championsData = await res.json();
  

  // By returning { props: { posts } }, the Blog component
  // will receive `posts` as a prop at build time
  return {
    props: {
      championsData,
      // post,
    },
  }
}
