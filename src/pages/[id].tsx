import { Banner } from "@/components/Banner";
import Image from "next/image";
import { useRef, useState } from "react";
import Slider from "react-slick";

// Generated by https://quicktype.io

export interface Champion {
  type:    string;
  format:  string;
  version: string;
  data:    Data;
}

export interface Data {
  championData: ChampName;
}

export interface ChampName {
  id:          string;
  key:         string;
  name:        string;
  title:       string;
  image:       Image;
  skins:       Skin[];
  lore:        string;
  blurb:       string;
  allytips:    string[];
  enemytips:   string[];
  tags:        string[];
  partype:     string;
  info:        Info;
  stats:       { [key: string]: number };
  spells:      Spell[];
  passive:     Passive;
  recommended: any[];
}

export interface Image {
  full:   string;
  sprite: string;
  group:  string;
  x:      number;
  y:      number;
  w:      number;
  h:      number;
}

export interface Info {
  attack:     number;
  defense:    number;
  magic:      number;
  difficulty: number;
}

export interface Passive {
  name:        string;
  description: string;
  image:       Image;
}

export interface Skin {
  id:      string;
  num:     number;
  name:    string;
  chromas: boolean;
}

export interface Spell {
  id:           string;
  name:         string;
  description:  string;
  tooltip:      string;
  leveltip:     Leveltip;
  maxrank:      number;
  cooldown:     number[];
  cooldownBurn: string;
  cost:         number[];
  costBurn:     string;
  datavalues:   Datavalues;
  effect:       Array<number[] | null>;
  effectBurn:   Array<null | string>;
  vars:         any[];
  costType:     string;
  maxammo:      string;
  range:        number[];
  rangeBurn:    string;
  image:        Image;
  resource:     string;
}

export interface Datavalues {
}

export interface Leveltip {
  label:  string[];
  effect: string[];
}

export default function Champ({ championData }: Data) {

  let champ = championData.id;

  let skins = [];

  skins = championData.skins;

  const [nav1, setNav1] = useState<any | null>();
  const [nav2, setNav2] = useState<any | null>();

  const slider1 = useRef();
  const slider2 = useRef();

  function removeHtmlTags(text: string) {
    let cleanText = text.replace(/<[^>]*>/g, '');
    return cleanText;
  }
  
  
  return (
    <div className="container mx-auto px-4 py-20">
      
      <Slider
        dots={false}
        fade={true}
        arrows={false}
        infinite={true}
        speed={500}
        slidesToShow={1}
        slidesToScroll={1}
        autoplay={true}
        className="legend_card"
      >
        {skins.map((skin) => (
          <div key={skin.id}>
            <Banner
              backgroundImage={`https://ddragon.leagueoflegends.com/cdn/img/champion/splash/${champ}_${skin.num}.jpg`}
              height="600px"
              overlay={false}
              backgroundPosition="center"
              backgroundSize="contain"
            />
          </div>
        ))}
    </Slider>
    <div className="flex justify-center text-center">
      <div style={{maxWidth: '100%'}}>
        <div className="grid xl:grid-cols-2 md:grid-cols-2 xs:grid-cols-1 gap-4 mt-20">
          <div className="legend_card">
          <h1 style={{fontStyle: 'italic'}} className="mt-5">
          {championData.name}
        </h1>
        <h4 className="mt-3">
          {championData.title}
        </h4>
        <div className="flex justify-center text-center mt-3">{championData.tags.map((tag => (<Image src={`/icons/${tag}.png`} width={32} height={32} alt={tag} key={tag}/>)))}</div>
          </div>
        <div className="text-left legend_card">
          <div style={{maxWidth: '100%'}}>
          <div style={{maxWidth: '100vh'}}>
            <Slider asNavFor={nav2} ref={(slider1) => setNav1(slider1)} fade={true} arrows={false}>
              <div style={{maxWidth: '100%'}}>
                <h3 className="my-4">
                  {championData.passive.name}
                </h3>
                <p className="mb-4">
                  {removeHtmlTags(championData.passive.description)}
                </p>
              </div>
              {championData.spells.map((spell => (
              <div key={spell.id}>
                <h3 className="my-4">
                  {spell.name}
                </h3>
                <p className="mb-4">
                  {spell.description}
                </p>
              </div>
              )))}
            </Slider>
            <div style={{width: '270px'}}>
              <Slider
                asNavFor={nav1}
                ref={(slider2) => setNav2(slider2)}
                slidesToShow={5}
                swipeToSlide={true}
                focusOnSelect={true}
              >
                <div>
                  <Image style={{margin: 'auto'}} src={`https://ddragon.leagueoflegends.com/cdn/13.13.1/img/passive/${championData.passive.image.full}`} width={40} height={40} alt={championData.passive.name}/>
                </div>
                {championData.spells.map((spell => (<div key={spell.id}><Image style={{margin: 'auto'}} src={`http://ddragon.leagueoflegends.com/cdn/13.13.1/img/spell/${spell.image.full}`} width={40} height={40} alt={spell.name} /></div>)))}
              </Slider>
            </div>
          </div>
          </div>
        </div>
        </div>
        
        <div className="flex justify-center text-center mt-20">
          <div style={{maxWidth: '100%'}} className="legend_card">
            <h3>
              Lore
            </h3>
            <p>
              {removeHtmlTags(championData.lore)}
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>
  );
}

export async function getAllChampsIds() {
  const res = await fetch(`http://ddragon.leagueoflegends.com/cdn/13.12.1/data/en_US/champion.json`);
  const data = await res.json();

  let champions = data.data;

  let arrayChampions = [];

  for (let clave in champions){
    arrayChampions.push(champions[clave]);
  }

  return arrayChampions.map((champ: any) => {
    return {
      params: {
        id: champ.id,
      },
    };
  });
}

export async function getStaticPaths() {

  const paths = await getAllChampsIds();
  
  return {
    paths,
    fallback: false,
  }
 
}

export async function getStaticProps({ params }: any) {
  

  const resById = await fetch(`http://ddragon.leagueoflegends.com/cdn/13.12.1/data/en_US/champion/${params.id}.json`)
  const data = await resById.json()

  let championData = data.data[`${params.id}`];
  
  // By returning { props: { posts } }, the Blog component
  // will receive `posts` as a prop at build time
  return {
    props: {
      championData,
      // post,
    },
  }
}